f.writelines('Malformed XML data' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Malformed XML data')]))
f.writelines('\n')
f.writelines('Login URL bypassed' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Login URL bypassed')]))
f.writelines('\n')
f.writelines('Plain text data does not comply with format settings' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Plain text data does not comply with format settings')]))
f.writelines('\n')
f.writelines('Binary content found in text only WebSocket' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Binary content found in text only WebSocket')]))
f.writelines('\n')
f.writelines('Illegal meta character in value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal meta character in value')]))
f.writelines('\n')
f.writelines('Illegal cookie length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal cookie length')]))
f.writelines('\n')
f.writelines('Brute Force: Maximum login attempts are exceeded' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Brute Force: Maximum login attempts are exceeded')]))
f.writelines('\n')
f.writelines('GWT data does not comply with format settings' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('GWT data does not comply with format settings')]))
f.writelines('\n')
f.writelines('HTTP protocol compliance failed' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('HTTP protocol compliance failed')]))
f.writelines('\n')
f.writelines('Host name mismatch' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Host name mismatch')]))
f.writelines('\n')
f.writelines('Illegal repeated parameter name' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal repeated parameter name')]))
f.writelines('\n')
f.writelines('Illegal flow to URL' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal flow to URL')]))
f.writelines('\n')
f.writelines('Illegal WebSocket extension' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal WebSocket extension')]))
f.writelines('\n')
f.writelines('Threat Campaign detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Threat Campaign detected')]))
f.writelines('\n')
f.writelines('Mandatory request body is missing' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Mandatory request body is missing')]))
f.writelines('\n')
f.writelines('Mask not found in client frame' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Mask not found in client frame')]))
f.writelines('\n')
f.writelines('Illegal attachment in SOAP message' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal attachment in SOAP message')]))
f.writelines('\n')
f.writelines('Access from disallowed User/Session/IP/Device ID' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Access from disallowed User/Session/IP/Device ID')]))
f.writelines('\n')
f.writelines('CSRF authentication expired' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('CSRF authentication expired')]))
f.writelines('\n')
f.writelines('Illegal method' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal method')]))
f.writelines('\n')
f.writelines('SOAP method not allowed' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('SOAP method not allowed')]))
f.writelines('\n')
f.writelines('Bad Actor Detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Bad Actor Detected')]))
f.writelines('\n')
f.writelines('Null character found in WebSocket text message' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Null character found in WebSocket text message')]))
f.writelines('\n')
f.writelines('Bad WebSocket handshake request' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Bad WebSocket handshake request')]))
f.writelines('\n')
f.writelines('Modified ASM cookie' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Modified ASM cookie')]))
f.writelines('\n')
f.writelines('XML data does not comply with schema or WSDL document' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('XML data does not comply with schema or WSDL document')]))
f.writelines('\n')
f.writelines('JSON data does not comply with JSON schema' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('JSON data does not comply with JSON schema')]))
f.writelines('\n')
f.writelines('Illegal parameter numeric value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal parameter numeric value')]))
f.writelines('\n')
f.writelines('Illegal parameter' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal parameter')]))
f.writelines('\n')
f.writelines('Illegal URL' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal URL')]))
f.writelines('\n')
f.writelines('Illegal empty parameter value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal empty parameter value')]))
f.writelines('\n')
f.writelines('Malformed GWT data' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Malformed GWT data')]))
f.writelines('\n')
f.writelines('Illegal Base64 value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal Base64 value')]))
f.writelines('\n')
f.writelines('Illegal session ID in URL' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal session ID in URL')]))
f.writelines('\n')
f.writelines('Illegal request content type' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal request content type')]))
f.writelines('\n')
f.writelines('ASM Cookie Hijacking' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('ASM Cookie Hijacking')]))
f.writelines('\n')
f.writelines('Illegal host name' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal host name')]))
f.writelines('\n')
f.writelines('Failure in WebSocket framing protocol' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Failure in WebSocket framing protocol')]))
f.writelines('\n')
f.writelines('Bad Actor Convicted' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Bad Actor Convicted')]))
f.writelines('\n')
f.writelines('Mandatory parameter is missing' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Mandatory parameter is missing')]))
f.writelines('\n')
f.writelines('Malformed JSON data' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Malformed JSON data')]))
f.writelines('\n')
f.writelines('XML data does not comply with format settings' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('XML data does not comply with format settings')]))
f.writelines('\n')
f.writelines('Illegal meta character in URL' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal meta character in URL')]))
f.writelines('\n')
f.writelines('Disallowed file upload content detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Disallowed file upload content detected')]))
f.writelines('\n')
f.writelines('Illegal WebSocket frame length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal WebSocket frame length')]))
f.writelines('\n')
f.writelines('Access from disallowed Geolocation' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Access from disallowed Geolocation')]))
f.writelines('\n')
f.writelines('Illegal WebSocket binary message length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal WebSocket binary message length')]))
f.writelines('\n')
f.writelines('Illegal entry point' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal entry point')]))
f.writelines('\n')
f.writelines('IP is blacklisted' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('IP is blacklisted')]))
f.writelines('\n')
f.writelines('Illegal file type' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal file type')]))
f.writelines('\n')
f.writelines('Illegal query string length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal query string length')]))
f.writelines('\n')
f.writelines('Parameter value does not comply with regular expression' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Parameter value does not comply with regular expression')]))
f.writelines('\n')
f.writelines('Illegal meta character in header' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal meta character in header')]))
f.writelines('\n')
f.writelines('Illegal number of frames per message' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal number of frames per message')]))
f.writelines('\n')
f.writelines('Data Guard: Information leakage detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Data Guard: Information leakage detected')]))
f.writelines('\n')
f.writelines('Illegal static parameter value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal static parameter value')]))
f.writelines('\n')
f.writelines('JSON data does not comply with format settings' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('JSON data does not comply with format settings')]))
f.writelines('\n')
f.writelines('Illegal parameter array value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal parameter array value')]))
f.writelines('\n')
f.writelines('Illegal number of mandatory parameters' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal number of mandatory parameters')]))
f.writelines('\n')
f.writelines('Illegal cross-origin request' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal cross-origin request')]))
f.writelines('\n')
f.writelines('Evasion technique detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Evasion technique detected')]))
f.writelines('\n')
f.writelines('Cookie not RFC-compliant' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Cookie not RFC-compliant')]))
f.writelines('\n')
f.writelines('Illegal dynamic parameter value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal dynamic parameter value')]))
f.writelines('\n')
f.writelines('Illegal meta character in parameter name' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal meta character in parameter name')]))
f.writelines('\n')
f.writelines('Login URL expired' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Login URL expired')]))
f.writelines('\n')
f.writelines('Illegal redirection attempt' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal redirection attempt')]))
f.writelines('\n')
f.writelines('Virus detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Virus detected')]))
f.writelines('\n')
f.writelines('Illegal POST data length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal POST data length')]))
f.writelines('\n')
f.writelines('Illegal HTTP status in response' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal HTTP status in response')]))
f.writelines('\n')
f.writelines('Text content found in binary only WebSocket' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Text content found in binary only WebSocket')]))
f.writelines('\n')
f.writelines('Failed to convert character' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Failed to convert character')]))
f.writelines('\n')
f.writelines('Illegal header length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal header length')]))
f.writelines('\n')
f.writelines('Mandatory HTTP header is missing' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Mandatory HTTP header is missing')]))
f.writelines('\n')
f.writelines('Null in multi-part parameter value' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Null in multi-part parameter value')]))
f.writelines('\n')
f.writelines('Illegal parameter value length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal parameter value length')]))
f.writelines('\n')
f.writelines('Access from malicious IP address' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Access from malicious IP address')]))
f.writelines('\n')
f.writelines('Illegal parameter data type' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal parameter data type')]))
f.writelines('\n')
f.writelines('CSRF attack detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('CSRF attack detected')]))
f.writelines('\n')
f.writelines('Illegal parameter location' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal parameter location')]))
f.writelines('\n')
f.writelines('Blocking Condition Detected' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Blocking Condition Detected')]))
f.writelines('\n')
f.writelines('Request length exceeds defined buffer size' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Request length exceeds defined buffer size')]))
f.writelines('\n')
f.writelines('Web Services Security failure' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Web Services Security failure')]))
f.writelines('\n')
f.writelines('Illegal query string or POST data' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal query string or POST data')]))
f.writelines('\n')
f.writelines('Illegal URL length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal URL length')]))
f.writelines('\n')
f.writelines('Modified domain cookie(s)' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Modified domain cookie(s)')]))
f.writelines('\n')
f.writelines('Expired timestamp' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Expired timestamp')]))
f.writelines('\n')
f.writelines('Illegal request length' + ',' + ','.join(policy_alarm_block_learn[policy_violations.index('Illegal request length')]))
f.writelines('\n')
